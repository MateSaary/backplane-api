// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for JobStatusStatus.
const (
	JobStatusStatusFailed    JobStatusStatus = "Failed"
	JobStatusStatusKilled    JobStatusStatus = "Killed"
	JobStatusStatusPending   JobStatusStatus = "Pending"
	JobStatusStatusRunning   JobStatusStatus = "Running"
	JobStatusStatusSucceeded JobStatusStatus = "Succeeded"
	JobStatusStatusUnknown   JobStatusStatus = "Unknown"
)

// Defines values for ScriptLanguage.
const (
	ScriptLanguageBash   ScriptLanguage = "bash"
	ScriptLanguagePython ScriptLanguage = "python"
)

// Defines values for ScriptMetadataLanguage.
const (
	ScriptMetadataLanguageBash   ScriptMetadataLanguage = "bash"
	ScriptMetadataLanguagePython ScriptMetadataLanguage = "python"
)

// Defines values for TestJobResultStatus.
const (
	TestJobResultStatusFailed    TestJobResultStatus = "Failed"
	TestJobResultStatusPending   TestJobResultStatus = "Pending"
	TestJobResultStatusRunning   TestJobResultStatus = "Running"
	TestJobResultStatusSucceeded TestJobResultStatus = "Succeeded"
)

// AssumableRole Roles and there corresponding ARN
type AssumableRole struct {
	// Arn ARN for the assumable role
	Arn string `json:"arn"`

	// Name Human readable
	Name string `json:"name"`
}

// AssumeRoleSequenceResponse Response for assume role handler
type AssumeRoleSequenceResponse struct {
	// AssumptionSequence Role ARNs to assume in order
	AssumptionSequence []AssumableRole `json:"assumptionSequence"`
}

// CloudCredentialsResponse Response for cloud handler
type CloudCredentialsResponse struct {
	// ClusterID ClusterID
	ClusterID string `json:"clusterID"`

	// ConsoleLink Link to the console, optional
	ConsoleLink *string `json:"consoleLink,omitempty"`

	// Credentials Cloud credentials, optional
	Credentials *string `json:"credentials,omitempty"`

	// Region Region, optional
	Region *string `json:"region,omitempty"`
}

// CreateJob defines model for CreateJob.
type CreateJob struct {
	// CanonicalName Name of the script to run
	CanonicalName *string `json:"canonicalName,omitempty"`

	// Parameters A map of parameters for the script, must be a flat object and matches
	// the parameters declared on the metadata
	Parameters *map[string]string `json:"parameters,omitempty"`
}

// CreateTestJob Body for creating a test job
type CreateTestJob struct {
	// BaseImageOverride Container image tag to override default managed-scripts base image during test job run.
	BaseImageOverride *string `json:"baseImageOverride,omitempty"`

	// DryRun Flag to indicate whether to generate a template or execute the script
	DryRun *bool `json:"dryRun,omitempty"`

	// Parameters A map of parameters for the script, must be a flat object and matches
	// the parameters declared on the metadata
	Parameters *map[string]string `json:"parameters,omitempty"`

	// ScriptBody Base64 encoded script body to run
	ScriptBody string `json:"scriptBody"`

	// ScriptMetadata Script metadata
	ScriptMetadata ScriptMetadata `json:"scriptMetadata"`
}

// EnvDecl defines model for EnvDecl.
type EnvDecl struct {
	// Description A description of the env var
	Description *string `json:"description,omitempty"`

	// Key Key of the env
	Key *string `json:"key,omitempty"`

	// Optional Whether this env var is optional
	Optional *bool `json:"optional,omitempty"`
}

// EnvRealised defines model for EnvRealised.
type EnvRealised struct {
	// Key Key of the env
	Key *string `json:"key,omitempty"`

	// Value The processed value of the env var
	Value *string `json:"value,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Message Error Message
	Message *string `json:"message,omitempty"`

	// StatusCode HTTP status code
	StatusCode *int `json:"statusCode,omitempty"`
}

// Job defines model for Job.
type Job struct {
	// JobId An unique id to identify this job run
	JobId     *string    `json:"jobId,omitempty"`
	JobStatus *JobStatus `json:"jobStatus,omitempty"`

	// Message A helpful message to the user
	Message *string `json:"message,omitempty"`

	// UserMD5 MD5 of the user who created the job
	UserMD5 *string `json:"userMD5,omitempty"`
}

// JobStatus defines model for JobStatus.
type JobStatus struct {
	// End End/Finish time of the script
	End *time.Time `json:"end"`

	// Envs A array of environment parameters for the script
	Envs *[]EnvRealised `json:"envs,omitempty"`

	// Namespace Namespace of the script being ran
	Namespace *string `json:"namespace,omitempty"`
	Script    *Script `json:"script,omitempty"`

	// Start Start time of the script
	Start *time.Time `json:"start,omitempty"`

	// Status status of the script
	Status *JobStatusStatus `json:"status,omitempty"`
}

// JobStatusStatus status of the script
type JobStatusStatus string

// LabelDecl defines model for LabelDecl.
type LabelDecl struct {
	// Description A brief description of the label
	Description *string `json:"description,omitempty"`

	// Key Key of the label
	Key *string `json:"key,omitempty"`

	// Values Values for the label
	Values *[]interface{} `json:"values,omitempty"`
}

// LoginResponse Login status response
type LoginResponse struct {
	// Message message
	Message *string `json:"message,omitempty"`

	// ProxyUri KubeAPI proxy URI
	ProxyUri *string `json:"proxy_uri,omitempty"`

	// StatusCode status code
	StatusCode *int `json:"statusCode,omitempty"`
}

// Logs defines model for Logs.
type Logs struct {
	// Logs Logs of the pod
	Logs *string `json:"logs,omitempty"`
}

// PolicyRule defines model for PolicyRule.
type PolicyRule struct {
	ApiGroups       *[]string `json:"apiGroups,omitempty" yaml:"apiGroups,omitempty"`
	NonResourceURLs *[]string `json:"nonResourceURLs,omitempty" yaml:"nonResourceURLs,omitempty"`
	ResourceNames   *[]string `json:"resourceNames,omitempty" yaml:"resourceNames,omitempty"`
	Resources       *[]string `json:"resources,omitempty" yaml:"resources,omitempty"`
	Verbs           *[]string `json:"verbs,omitempty" yaml:"verbs,omitempty"`
}

// RBAC RBAC declaration
type RBAC struct {
	ClusterRoleRules *[]PolicyRule   `json:"clusterRoleRules,omitempty" yaml:"clusterRoleRules,omitempty"`
	Roles            *[]RoleRbacDecl `json:"roles,omitempty" yaml:"roles,omitempty"`
}

// RoleRbacDecl defines model for RoleRbacDecl.
type RoleRbacDecl struct {
	Namespace *string       `json:"namespace,omitempty"`
	Rules     *[]PolicyRule `json:"rules,omitempty"`
}

// Script defines model for Script.
type Script struct {
	// AllowedGroups Which groups are allowed to run this script
	AllowedGroups *[]string `json:"allowedGroups,omitempty"`

	// Author Author of the script, github username
	Author *string `json:"author,omitempty"`

	// CanonicalName Fully qualified name of the script, in the format of roleId/scriptname.
	// Must be unique, MR in-place check to enforce this
	CanonicalName *string `json:"canonicalName,omitempty"`

	// CustomerDataAccess Whether or not the script has access to customer data
	CustomerDataAccess *bool `json:"customerDataAccess,omitempty"`

	// Description A brief description of the script and what it does
	Description *string `json:"description,omitempty"`

	// Envs An array of environment variables for the script
	Envs *[]EnvDecl `json:"envs,omitempty"`

	// Labels An array of labels for the script
	Labels *[]interface{} `json:"labels,omitempty"`

	// Language The script language
	Language *ScriptLanguage `json:"language,omitempty"`

	// Path Path from the repo root to the script
	Path *string `json:"path,omitempty"`

	// Permalink Permalink to the script file on git
	Permalink *string `json:"permalink,omitempty"`

	// Rbac RBAC declaration
	Rbac *RBAC `json:"rbac,omitempty" yaml:"rbac,omitempty"`

	// ShortDescription A shorter description for tables and lists
	ShortDescription *string `json:"shortDescription,omitempty"`
}

// ScriptLanguage The script language
type ScriptLanguage string

// ScriptMetadata Script metadata
type ScriptMetadata struct {
	AllowedGroups      []string               `json:"allowedGroups"`
	Author             string                 `json:"author"`
	CustomerDataAccess bool                   `json:"customerDataAccess"`
	Description        string                 `json:"description"`
	Envs               []EnvDecl              `json:"envs"`
	File               string                 `json:"file"`
	Labels             []LabelDecl            `json:"labels"`
	Language           ScriptMetadataLanguage `json:"language"`
	Name               string                 `json:"name"`

	// Rbac RBAC declaration
	Rbac             RBAC   `json:"rbac" yaml:"rbac,omitempty"`
	ShortDescription string `json:"shortDescription"`
}

// ScriptMetadataLanguage defines model for ScriptMetadata.Language.
type ScriptMetadataLanguage string

// Scripts defines model for Scripts.
type Scripts = []Script

// TestJobResult Body of response for a test job run
type TestJobResult struct {
	Message *string `json:"message,omitempty"`

	// Status Test run status
	Status *TestJobResultStatus `json:"status,omitempty"`

	// TestId A unique id for test script run
	TestId string `json:"testId"`
}

// TestJobResultStatus Test run status
type TestJobResultStatus string

// LoginClusterParams defines parameters for LoginCluster.
type LoginClusterParams struct {
	// Remediation The name of a remediation for which RBAC should be created
	Remediation *string `form:"remediation,omitempty" json:"remediation,omitempty"`
}

// GetScriptsByClusterParams defines parameters for GetScriptsByCluster.
type GetScriptsByClusterParams struct {
	Scriptname *string `form:"scriptname,omitempty" json:"scriptname,omitempty"`
}

// GetJobLogsParams defines parameters for GetJobLogs.
type GetJobLogsParams struct {
	// Version The version to return. Default is JSON, v2 is streaming
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Follow Specify if the logs should be followed.
	Follow *bool `form:"follow,omitempty" json:"follow,omitempty"`
}

// GetTestScriptRunLogsParams defines parameters for GetTestScriptRunLogs.
type GetTestScriptRunLogsParams struct {
	// Version The version to return. Default is JSON, v2 is streaming
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// Follow Specify if the logs should be followed.
	Follow *bool `form:"follow,omitempty" json:"follow,omitempty"`
}

// CreateJobJSONRequestBody defines body for CreateJob for application/json ContentType.
type CreateJobJSONRequestBody = CreateJob

// CreateTestScriptRunJSONRequestBody defines body for CreateTestScriptRun for application/json ContentType.
type CreateTestScriptRunJSONRequestBody = CreateTestJob

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCloudConsole request
	GetCloudConsole(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAssumeRoleSequence request
	GetAssumeRoleSequence(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCloudCredentials request
	GetCloudCredentials(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBackplaneClusterClusterId request
	DeleteBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBackplaneClusterClusterId request
	GetBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadBackplaneClusterClusterId request
	HeadBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OptionsBackplaneClusterClusterId request
	OptionsBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBackplaneClusterClusterId request
	PatchBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBackplaneClusterClusterId request
	PostBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBackplaneClusterClusterId request
	PutBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TraceBackplaneClusterClusterId request
	TraceBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginCluster request
	LoginCluster(ctx context.Context, clusterId string, params *LoginClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScriptsByCluster request
	GetScriptsByCluster(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllJobs request
	GetAllJobs(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateJob request with any body
	CreateJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateJob(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJob request
	DeleteJob(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRun request
	GetRun(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobLogs request
	GetJobLogs(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTestScriptRun request with any body
	CreateTestScriptRunWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTestScriptRun(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTestScriptRun request
	GetTestScriptRun(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTestScriptRunLogs request
	GetTestScriptRunLogs(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCloudConsole(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudConsoleRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAssumeRoleSequence(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssumeRoleSequenceRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCloudCredentials(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCloudCredentialsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OptionsBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOptionsBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TraceBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTraceBackplaneClusterClusterIdRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginCluster(ctx context.Context, clusterId string, params *LoginClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginClusterRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScriptsByCluster(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScriptsByClusterRequest(c.Server, clusterId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllJobs(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllJobsRequest(c.Server, clusterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJobWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateJob(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateJobRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJob(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobRequest(c.Server, clusterId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRun(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunRequest(c.Server, clusterId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobLogs(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobLogsRequest(c.Server, clusterId, jobId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTestScriptRunWithBody(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTestScriptRunRequestWithBody(c.Server, clusterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTestScriptRun(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTestScriptRunRequest(c.Server, clusterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTestScriptRun(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTestScriptRunRequest(c.Server, clusterId, testId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTestScriptRunLogs(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTestScriptRunLogsRequest(c.Server, clusterId, testId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCloudConsoleRequest generates requests for GetCloudConsole
func NewGetCloudConsoleRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cloud/console/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAssumeRoleSequenceRequest generates requests for GetAssumeRoleSequence
func NewGetAssumeRoleSequenceRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cloud/credentials/assume-role-sequence/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCloudCredentialsRequest generates requests for GetCloudCredentials
func NewGetCloudCredentialsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cloud/credentials/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBackplaneClusterClusterIdRequest generates requests for DeleteBackplaneClusterClusterId
func NewDeleteBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBackplaneClusterClusterIdRequest generates requests for GetBackplaneClusterClusterId
func NewGetBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadBackplaneClusterClusterIdRequest generates requests for HeadBackplaneClusterClusterId
func NewHeadBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOptionsBackplaneClusterClusterIdRequest generates requests for OptionsBackplaneClusterClusterId
func NewOptionsBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("OPTIONS", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchBackplaneClusterClusterIdRequest generates requests for PatchBackplaneClusterClusterId
func NewPatchBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBackplaneClusterClusterIdRequest generates requests for PostBackplaneClusterClusterId
func NewPostBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBackplaneClusterClusterIdRequest generates requests for PutBackplaneClusterClusterId
func NewPutBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTraceBackplaneClusterClusterIdRequest generates requests for TraceBackplaneClusterClusterId
func NewTraceBackplaneClusterClusterIdRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/cluster/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("TRACE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginClusterRequest generates requests for LoginCluster
func NewLoginClusterRequest(server string, clusterId string, params *LoginClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/login/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Remediation != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remediation", runtime.ParamLocationQuery, *params.Remediation); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScriptsByClusterRequest generates requests for GetScriptsByCluster
func NewGetScriptsByClusterRequest(server string, clusterId string, params *GetScriptsByClusterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Scriptname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scriptname", runtime.ParamLocationQuery, *params.Scriptname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllJobsRequest generates requests for GetAllJobs
func NewGetAllJobsRequest(server string, clusterId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateJobRequest calls the generic CreateJob builder with application/json body
func NewCreateJobRequest(server string, clusterId string, body CreateJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateJobRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewCreateJobRequestWithBody generates requests for CreateJob with any type of body
func NewCreateJobRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteJobRequest generates requests for DeleteJob
func NewDeleteJobRequest(server string, clusterId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunRequest generates requests for GetRun
func NewGetRunRequest(server string, clusterId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobLogsRequest generates requests for GetJobLogs
func NewGetJobLogsRequest(server string, clusterId string, jobId string, params *GetJobLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/script/%s/job/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Follow != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "follow", runtime.ParamLocationQuery, *params.Follow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTestScriptRunRequest calls the generic CreateTestScriptRun builder with application/json body
func NewCreateTestScriptRunRequest(server string, clusterId string, body CreateTestScriptRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTestScriptRunRequestWithBody(server, clusterId, "application/json", bodyReader)
}

// NewCreateTestScriptRunRequestWithBody generates requests for CreateTestScriptRun with any type of body
func NewCreateTestScriptRunRequestWithBody(server string, clusterId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/testscript/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTestScriptRunRequest generates requests for GetTestScriptRun
func NewGetTestScriptRunRequest(server string, clusterId string, testId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "testId", runtime.ParamLocationPath, testId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/testscript/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTestScriptRunLogsRequest generates requests for GetTestScriptRunLogs
func NewGetTestScriptRunLogsRequest(server string, clusterId string, testId string, params *GetTestScriptRunLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "clusterId", runtime.ParamLocationPath, clusterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "testId", runtime.ParamLocationPath, testId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backplane/testscript/%s/%s/logs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Follow != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "follow", runtime.ParamLocationQuery, *params.Follow); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCloudConsole request
	GetCloudConsoleWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudConsoleResponse, error)

	// GetAssumeRoleSequence request
	GetAssumeRoleSequenceWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAssumeRoleSequenceResponse, error)

	// GetCloudCredentials request
	GetCloudCredentialsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudCredentialsResponse, error)

	// DeleteBackplaneClusterClusterId request
	DeleteBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*DeleteBackplaneClusterClusterIdResponse, error)

	// GetBackplaneClusterClusterId request
	GetBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetBackplaneClusterClusterIdResponse, error)

	// HeadBackplaneClusterClusterId request
	HeadBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*HeadBackplaneClusterClusterIdResponse, error)

	// OptionsBackplaneClusterClusterId request
	OptionsBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*OptionsBackplaneClusterClusterIdResponse, error)

	// PatchBackplaneClusterClusterId request
	PatchBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PatchBackplaneClusterClusterIdResponse, error)

	// PostBackplaneClusterClusterId request
	PostBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PostBackplaneClusterClusterIdResponse, error)

	// PutBackplaneClusterClusterId request
	PutBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PutBackplaneClusterClusterIdResponse, error)

	// TraceBackplaneClusterClusterId request
	TraceBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*TraceBackplaneClusterClusterIdResponse, error)

	// LoginCluster request
	LoginClusterWithResponse(ctx context.Context, clusterId string, params *LoginClusterParams, reqEditors ...RequestEditorFn) (*LoginClusterResponse, error)

	// GetScriptsByCluster request
	GetScriptsByClusterWithResponse(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*GetScriptsByClusterResponse, error)

	// GetAllJobs request
	GetAllJobsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAllJobsResponse, error)

	// CreateJob request with any body
	CreateJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	CreateJobWithResponse(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error)

	// DeleteJob request
	DeleteJobWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobResponse, error)

	// GetRun request
	GetRunWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*GetRunResponse, error)

	// GetJobLogs request
	GetJobLogsWithResponse(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*GetJobLogsResponse, error)

	// CreateTestScriptRun request with any body
	CreateTestScriptRunWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error)

	CreateTestScriptRunWithResponse(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error)

	// GetTestScriptRun request
	GetTestScriptRunWithResponse(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*GetTestScriptRunResponse, error)

	// GetTestScriptRunLogs request
	GetTestScriptRunLogsWithResponse(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*GetTestScriptRunLogsResponse, error)
}

type GetCloudConsoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentialsResponse
}

// Status returns HTTPResponse.Status
func (r GetCloudConsoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudConsoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssumeRoleSequenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssumeRoleSequenceResponse
}

// Status returns HTTPResponse.Status
func (r GetAssumeRoleSequenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssumeRoleSequenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCloudCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloudCredentialsResponse
}

// Status returns HTTPResponse.Status
func (r GetCloudCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCloudCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OptionsBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OptionsBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OptionsBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TraceBackplaneClusterClusterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TraceBackplaneClusterClusterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TraceBackplaneClusterClusterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
}

// Status returns HTTPResponse.Status
func (r LoginClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScriptsByClusterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scripts
}

// Status returns HTTPResponse.Status
func (r GetScriptsByClusterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScriptsByClusterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Job
}

// Status returns HTTPResponse.Status
func (r GetAllJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
}

// Status returns HTTPResponse.Status
func (r CreateJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Job
}

// Status returns HTTPResponse.Status
func (r GetRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Logs
}

// Status returns HTTPResponse.Status
func (r GetJobLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTestScriptRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestJobResult
}

// Status returns HTTPResponse.Status
func (r CreateTestScriptRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTestScriptRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTestScriptRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TestJobResult
}

// Status returns HTTPResponse.Status
func (r GetTestScriptRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTestScriptRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTestScriptRunLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Logs
}

// Status returns HTTPResponse.Status
func (r GetTestScriptRunLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTestScriptRunLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCloudConsoleWithResponse request returning *GetCloudConsoleResponse
func (c *ClientWithResponses) GetCloudConsoleWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudConsoleResponse, error) {
	rsp, err := c.GetCloudConsole(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudConsoleResponse(rsp)
}

// GetAssumeRoleSequenceWithResponse request returning *GetAssumeRoleSequenceResponse
func (c *ClientWithResponses) GetAssumeRoleSequenceWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAssumeRoleSequenceResponse, error) {
	rsp, err := c.GetAssumeRoleSequence(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssumeRoleSequenceResponse(rsp)
}

// GetCloudCredentialsWithResponse request returning *GetCloudCredentialsResponse
func (c *ClientWithResponses) GetCloudCredentialsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetCloudCredentialsResponse, error) {
	rsp, err := c.GetCloudCredentials(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCloudCredentialsResponse(rsp)
}

// DeleteBackplaneClusterClusterIdWithResponse request returning *DeleteBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) DeleteBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*DeleteBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.DeleteBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBackplaneClusterClusterIdResponse(rsp)
}

// GetBackplaneClusterClusterIdWithResponse request returning *GetBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) GetBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.GetBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackplaneClusterClusterIdResponse(rsp)
}

// HeadBackplaneClusterClusterIdWithResponse request returning *HeadBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) HeadBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*HeadBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.HeadBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadBackplaneClusterClusterIdResponse(rsp)
}

// OptionsBackplaneClusterClusterIdWithResponse request returning *OptionsBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) OptionsBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*OptionsBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.OptionsBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOptionsBackplaneClusterClusterIdResponse(rsp)
}

// PatchBackplaneClusterClusterIdWithResponse request returning *PatchBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) PatchBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PatchBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.PatchBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBackplaneClusterClusterIdResponse(rsp)
}

// PostBackplaneClusterClusterIdWithResponse request returning *PostBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) PostBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PostBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.PostBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBackplaneClusterClusterIdResponse(rsp)
}

// PutBackplaneClusterClusterIdWithResponse request returning *PutBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) PutBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*PutBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.PutBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBackplaneClusterClusterIdResponse(rsp)
}

// TraceBackplaneClusterClusterIdWithResponse request returning *TraceBackplaneClusterClusterIdResponse
func (c *ClientWithResponses) TraceBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*TraceBackplaneClusterClusterIdResponse, error) {
	rsp, err := c.TraceBackplaneClusterClusterId(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTraceBackplaneClusterClusterIdResponse(rsp)
}

// LoginClusterWithResponse request returning *LoginClusterResponse
func (c *ClientWithResponses) LoginClusterWithResponse(ctx context.Context, clusterId string, params *LoginClusterParams, reqEditors ...RequestEditorFn) (*LoginClusterResponse, error) {
	rsp, err := c.LoginCluster(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginClusterResponse(rsp)
}

// GetScriptsByClusterWithResponse request returning *GetScriptsByClusterResponse
func (c *ClientWithResponses) GetScriptsByClusterWithResponse(ctx context.Context, clusterId string, params *GetScriptsByClusterParams, reqEditors ...RequestEditorFn) (*GetScriptsByClusterResponse, error) {
	rsp, err := c.GetScriptsByCluster(ctx, clusterId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScriptsByClusterResponse(rsp)
}

// GetAllJobsWithResponse request returning *GetAllJobsResponse
func (c *ClientWithResponses) GetAllJobsWithResponse(ctx context.Context, clusterId string, reqEditors ...RequestEditorFn) (*GetAllJobsResponse, error) {
	rsp, err := c.GetAllJobs(ctx, clusterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllJobsResponse(rsp)
}

// CreateJobWithBodyWithResponse request with arbitrary body returning *CreateJobResponse
func (c *ClientWithResponses) CreateJobWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJobWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

func (c *ClientWithResponses) CreateJobWithResponse(ctx context.Context, clusterId string, body CreateJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateJobResponse, error) {
	rsp, err := c.CreateJob(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateJobResponse(rsp)
}

// DeleteJobWithResponse request returning *DeleteJobResponse
func (c *ClientWithResponses) DeleteJobWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*DeleteJobResponse, error) {
	rsp, err := c.DeleteJob(ctx, clusterId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobResponse(rsp)
}

// GetRunWithResponse request returning *GetRunResponse
func (c *ClientWithResponses) GetRunWithResponse(ctx context.Context, clusterId string, jobId string, reqEditors ...RequestEditorFn) (*GetRunResponse, error) {
	rsp, err := c.GetRun(ctx, clusterId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunResponse(rsp)
}

// GetJobLogsWithResponse request returning *GetJobLogsResponse
func (c *ClientWithResponses) GetJobLogsWithResponse(ctx context.Context, clusterId string, jobId string, params *GetJobLogsParams, reqEditors ...RequestEditorFn) (*GetJobLogsResponse, error) {
	rsp, err := c.GetJobLogs(ctx, clusterId, jobId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobLogsResponse(rsp)
}

// CreateTestScriptRunWithBodyWithResponse request with arbitrary body returning *CreateTestScriptRunResponse
func (c *ClientWithResponses) CreateTestScriptRunWithBodyWithResponse(ctx context.Context, clusterId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error) {
	rsp, err := c.CreateTestScriptRunWithBody(ctx, clusterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTestScriptRunResponse(rsp)
}

func (c *ClientWithResponses) CreateTestScriptRunWithResponse(ctx context.Context, clusterId string, body CreateTestScriptRunJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTestScriptRunResponse, error) {
	rsp, err := c.CreateTestScriptRun(ctx, clusterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTestScriptRunResponse(rsp)
}

// GetTestScriptRunWithResponse request returning *GetTestScriptRunResponse
func (c *ClientWithResponses) GetTestScriptRunWithResponse(ctx context.Context, clusterId string, testId string, reqEditors ...RequestEditorFn) (*GetTestScriptRunResponse, error) {
	rsp, err := c.GetTestScriptRun(ctx, clusterId, testId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTestScriptRunResponse(rsp)
}

// GetTestScriptRunLogsWithResponse request returning *GetTestScriptRunLogsResponse
func (c *ClientWithResponses) GetTestScriptRunLogsWithResponse(ctx context.Context, clusterId string, testId string, params *GetTestScriptRunLogsParams, reqEditors ...RequestEditorFn) (*GetTestScriptRunLogsResponse, error) {
	rsp, err := c.GetTestScriptRunLogs(ctx, clusterId, testId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTestScriptRunLogsResponse(rsp)
}

// ParseGetCloudConsoleResponse parses an HTTP response from a GetCloudConsoleWithResponse call
func ParseGetCloudConsoleResponse(rsp *http.Response) (*GetCloudConsoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudConsoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentialsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAssumeRoleSequenceResponse parses an HTTP response from a GetAssumeRoleSequenceWithResponse call
func ParseGetAssumeRoleSequenceResponse(rsp *http.Response) (*GetAssumeRoleSequenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssumeRoleSequenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssumeRoleSequenceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCloudCredentialsResponse parses an HTTP response from a GetCloudCredentialsWithResponse call
func ParseGetCloudCredentialsResponse(rsp *http.Response) (*GetCloudCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCloudCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloudCredentialsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBackplaneClusterClusterIdResponse parses an HTTP response from a DeleteBackplaneClusterClusterIdWithResponse call
func ParseDeleteBackplaneClusterClusterIdResponse(rsp *http.Response) (*DeleteBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBackplaneClusterClusterIdResponse parses an HTTP response from a GetBackplaneClusterClusterIdWithResponse call
func ParseGetBackplaneClusterClusterIdResponse(rsp *http.Response) (*GetBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseHeadBackplaneClusterClusterIdResponse parses an HTTP response from a HeadBackplaneClusterClusterIdWithResponse call
func ParseHeadBackplaneClusterClusterIdResponse(rsp *http.Response) (*HeadBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOptionsBackplaneClusterClusterIdResponse parses an HTTP response from a OptionsBackplaneClusterClusterIdWithResponse call
func ParseOptionsBackplaneClusterClusterIdResponse(rsp *http.Response) (*OptionsBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OptionsBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchBackplaneClusterClusterIdResponse parses an HTTP response from a PatchBackplaneClusterClusterIdWithResponse call
func ParsePatchBackplaneClusterClusterIdResponse(rsp *http.Response) (*PatchBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBackplaneClusterClusterIdResponse parses an HTTP response from a PostBackplaneClusterClusterIdWithResponse call
func ParsePostBackplaneClusterClusterIdResponse(rsp *http.Response) (*PostBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutBackplaneClusterClusterIdResponse parses an HTTP response from a PutBackplaneClusterClusterIdWithResponse call
func ParsePutBackplaneClusterClusterIdResponse(rsp *http.Response) (*PutBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTraceBackplaneClusterClusterIdResponse parses an HTTP response from a TraceBackplaneClusterClusterIdWithResponse call
func ParseTraceBackplaneClusterClusterIdResponse(rsp *http.Response) (*TraceBackplaneClusterClusterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TraceBackplaneClusterClusterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoginClusterResponse parses an HTTP response from a LoginClusterWithResponse call
func ParseLoginClusterResponse(rsp *http.Response) (*LoginClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScriptsByClusterResponse parses an HTTP response from a GetScriptsByClusterWithResponse call
func ParseGetScriptsByClusterResponse(rsp *http.Response) (*GetScriptsByClusterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScriptsByClusterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scripts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllJobsResponse parses an HTTP response from a GetAllJobsWithResponse call
func ParseGetAllJobsResponse(rsp *http.Response) (*GetAllJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateJobResponse parses an HTTP response from a CreateJobWithResponse call
func ParseCreateJobResponse(rsp *http.Response) (*CreateJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteJobResponse parses an HTTP response from a DeleteJobWithResponse call
func ParseDeleteJobResponse(rsp *http.Response) (*DeleteJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRunResponse parses an HTTP response from a GetRunWithResponse call
func ParseGetRunResponse(rsp *http.Response) (*GetRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Job
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobLogsResponse parses an HTTP response from a GetJobLogsWithResponse call
func ParseGetJobLogsResponse(rsp *http.Response) (*GetJobLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Logs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/octet-stream) unsupported

	}

	return response, nil
}

// ParseCreateTestScriptRunResponse parses an HTTP response from a CreateTestScriptRunWithResponse call
func ParseCreateTestScriptRunResponse(rsp *http.Response) (*CreateTestScriptRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTestScriptRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestJobResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTestScriptRunResponse parses an HTTP response from a GetTestScriptRunWithResponse call
func ParseGetTestScriptRunResponse(rsp *http.Response) (*GetTestScriptRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTestScriptRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TestJobResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTestScriptRunLogsResponse parses an HTTP response from a GetTestScriptRunLogsWithResponse call
func ParseGetTestScriptRunLogsResponse(rsp *http.Response) (*GetTestScriptRunLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTestScriptRunLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Logs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/octet-stream) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
